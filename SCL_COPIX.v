//==========================================================
//  Title     : SONY Mobile CIS
//  Comment   : DUBE block
//  Project   : 
//
//  File Name : 
//
//
//  CONFIDENTIAL AND PROPRIETARY PRODUCT OF SONY CORPORATION
//  Copyright (c) 2015 Sony Corporation.  All Rights Reserved.
//
//  Reference File Name     : (Generated by Excel)
//  Reference File Revision : (none)
//  Reference File Project  : 
//==========================================================



module                  SCL_COPIX(
     VTCLK
    ,XRST
    ,SCL_CDIST_ALPHA
    ,SCL_CDIST_BETA
    ,SCL_LBUFF_IPIX0
    ,SCL_LBUFF_IPIX1
    ,SCL_LBUFF_IPIX2
    ,SCL_LBUFF_IPIX3
    ,ODATA_EN
    ,SCL_COPIX_OPIX
);


/*************************************************
INPUT , OUTPUT
*************************************************/
input           VTCLK;                          // 
input           XRST;                           // 
input   [8:0]   SCL_CDIST_ALPHA;                // 
input   [8:0]   SCL_CDIST_BETA;                 // 
input   [39:0]   SCL_LBUFF_IPIX0;                // 
input   [39:0]   SCL_LBUFF_IPIX1;                // 
input   [39:0]   SCL_LBUFF_IPIX2;                // 
input   [39:0]   SCL_LBUFF_IPIX3;                // 
input           ODATA_EN;                       // 
output  [9:0]   SCL_COPIX_OPIX;                 // 

/*************************************************
reg, wire
*************************************************/
reg [9:0] SCL_COPIX_OPIX;
//ln1
reg [9:0] s012ln1;
reg [9:0] ipix3pre;
reg [8:0] betapre;
reg [17:0] mbetaln1;
reg [26:0] malphaln1;
reg [10:0] opix_pre;
//ln2
reg [9:0] s10ln2;
reg [9:0] s10ln2pre;
//ln3
reg [8:0] alphapre;
reg [8:0] alphapre2;
//ln4
reg [17:0] s20mbeta;
reg [17:0] s20mbetapre;
reg [17:0] s20mbetapre2;
//ln5
reg [9:0] ipix0pre;
reg [9:0] ipix0pre2;
reg [9:0] ipix0pre3;
//BUSY
reg       odata_enpre1;
reg       odata_enpre2;
reg       odata_enpre3;
reg       odata_enpre4;
wire [9:0] SCL_COPIX_OPIX_r;

always @(posedge VTCLK or negedge XRST) begin
  if (XRST == 0) begin
    SCL_COPIX_OPIX <= 0;
  end else begin
    //ln1
    s012ln1 <= SCL_LBUFF_IPIX0 - SCL_LBUFF_IPIX1 - SCL_LBUFF_IPIX2;
    ipix3pre <= SCL_LBUFF_IPIX3;
    betapre <= SCL_CDIST_BETA;
    mbetaln1 <= {(s012ln1 + ipix3pre), 8'b0} * betapre;
    //ln2
    s10ln2 <= SCL_LBUFF_IPIX1 - SCL_LBUFF_IPIX0;
    s10ln2pre <= s10ln2;
    //ln3
    alphapre <= SCL_CDIST_ALPHA;
    alphapre2 <= alphapre;
    //ln4
    s20mbeta <= {(SCL_LBUFF_IPIX2 - SCL_LBUFF_IPIX0), 8'b0} * SCL_CDIST_BETA;
    s20mbetapre <= s20mbeta;
    s20mbetapre2 <= s20mbetapre;
    //ln5
    ipix0pre <= SCL_LBUFF_IPIX0;
    ipix0pre2 <= ipix0pre;
    ipix0pre3 <= ipix0pre2;
    //BUSY
    odata_enpre1 <= ODATA_EN;
    odata_enpre2 <= odata_enpre1;
    odata_enpre3 <= odata_enpre2;
    odata_enpre4 <= odata_enpre3;
    //add ln1 ln2 mul ln3
    malphaln1 <= (mbetaln1 + {s10ln2pre, 8'b0}) * alphapre2;
    opix_pre <= malphaln1 + {s20mbetapre2, 8'b0} + {ipix0pre3, 16'b0};
    //SCL_COPIX_OPIX
    if (odata_enpre4 == 0) begin
      SCL_COPIX_OPIX <= SCL_COPIX_OPIX_r;
    end
  end
end

round_SCL_COPIX_OPIX round_SCL_COPIX_OPIX(
  .in(opix_pre),
  .out(SCL_COPIX_OPIX_r)
);

endmodule

module round_SCL_COPIX_OPIX(
  input [10:0] in,
  output [9:0] out
);

assign out = (in + 10'b0000000001) >> 1;

endmodule
