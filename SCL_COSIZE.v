//==========================================================
//  Title     : SONY Mobile CIS
//  Comment   : DUBE block
//  Project   : 
//
//  File Name : 
//
//
//  CONFIDENTIAL AND PROPRIETARY PRODUCT OF SONY CORPORATION
//  Copyright (c) 2015 Sony Corporation.  All Rights Reserved.
//
//  Reference File Name     : (Generated by Excel)
//  Reference File Revision : (none)
//  Reference File Project  : 
//==========================================================



module                  SCL_COSIZE(
     VTCLK
    ,XRST
    ,RG_SCL_INPUT_WIDTH
    ,RG_SCL_INPUT_HEIGHT
    ,RG_SCL_SCALE_H
    ,RG_SCL_SCALE_V
    ,RG_SCL_SCALE_H_REC
    ,RG_SCL_SCALE_V_REC
    ,RG_SCL_OUTPUT_WIDTH
    ,RG_SCL_OUTPUT_HEIGHT
    ,SCL_COSIZE_SCALE_H_REC
    ,SCL_COSIZE_SCALE_V_REC
);


/*************************************************
INPUT , OUTPUT
*************************************************/
input           VTCLK;                          // 
input           XRST;                           // 
input   [10:0]  RG_SCL_INPUT_WIDTH;             // 
input   [10:0]  RG_SCL_INPUT_HEIGHT;            // 
input   [15:0]  RG_SCL_SCALE_H;                 // 
input   [15:0]  RG_SCL_SCALE_V;                 // 
input   [20:0]  RG_SCL_SCALE_H_REC;
input   [20:0]  RG_SCL_SCALE_V_REC;
output  [10:0]  RG_SCL_OUTPUT_WIDTH;            // 
output  [10:0]  RG_SCL_OUTPUT_HEIGHT;           // 
output  [20:0]  SCL_COSIZE_SCALE_H_REC;         // 
output  [20:0]  SCL_COSIZE_SCALE_V_REC;         // 

/*************************************************
reg, wire
*************************************************/
reg [10:0] RG_SCL_OUTPUT_WIDTH;
reg [10:0] RG_SCL_OUTPUT_HEIGHT;
reg  [20:0]  SCL_COSIZE_SCALE_H_REC;          
reg  [20:0]  SCL_COSIZE_SCALE_V_REC;         
reg [24:0] SCL_COSIZE_o_width_pre;
reg [24:0] SCL_COSIZE_o_height_pre;
wire [9:0] SCL_COSIZE_o_wdt_pre_r;
wire [9:0] SCL_COSIZE_o_hgt_pre_r;
wire SCL_COSIZE_sel_osize;

assign SCL_COSIZE_sel_osize = (({1'b0, SCL_COSIZE_o_wdt_pre_r} << 1) == 0) | (({1'b0, SCL_COSIZE_o_hgt_pre_r} << 1) == 0);

always @(posedge VTCLK or negedge XRST) begin

  if (XRST == 1'b0) begin
    RG_SCL_OUTPUT_WIDTH <= 0;
    RG_SCL_OUTPUT_HEIGHT <= 0;
    SCL_COSIZE_SCALE_H_REC <= 0;
    SCL_COSIZE_SCALE_V_REC <= 0;
    SCL_COSIZE_o_width_pre <= 0;
    SCL_COSIZE_o_height_pre <= 0;
  end else begin
    //pre
    SCL_COSIZE_o_width_pre <= (RG_SCL_INPUT_WIDTH >> 1) * RG_SCL_SCALE_H;
    SCL_COSIZE_o_height_pre <= (RG_SCL_INPUT_HEIGHT >> 1) * RG_SCL_SCALE_V;
    //output
    if (SCL_COSIZE_sel_osize == 1) begin
      RG_SCL_OUTPUT_WIDTH <= RG_SCL_INPUT_WIDTH;
      RG_SCL_OUTPUT_HEIGHT <= RG_SCL_INPUT_HEIGHT;
      SCL_COSIZE_SCALE_H_REC <= 21'b000001000000000000000;
      SCL_COSIZE_SCALE_V_REC <= 21'b000001000000000000000;
    end else begin
      RG_SCL_OUTPUT_WIDTH <= {1'b0, SCL_COSIZE_o_wdt_pre_r} << 1;
      RG_SCL_OUTPUT_HEIGHT <= {1'b0, SCL_COSIZE_o_hgt_pre_r} << 1;
      SCL_COSIZE_SCALE_H_REC <= RG_SCL_SCALE_H_REC;
      SCL_COSIZE_SCALE_V_REC <= RG_SCL_SCALE_V_REC;
    end
  end

end

round round_1(
  .in_d(SCL_COSIZE_o_width_pre[24:14]),
  .out_d(SCL_COSIZE_o_wdt_pre_r)
);

round round_2(
  .in_d(SCL_COSIZE_o_height_pre[24:14]),
  .out_d(SCL_COSIZE_o_hgt_pre_r)
);

endmodule


//round module
module round(
  input [10:0] in_d,
  output [9:0] out_d
);

assign out_d = (in_d + 10'b0000000001) >> 1;

endmodule
