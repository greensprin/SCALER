//==========================================================
//  Title     : SONY Mobile CIS
//  Comment   : DUBE block
//  Project   : 
//
//  File Name : 
//
//
//  CONFIDENTIAL AND PROPRIETARY PRODUCT OF SONY CORPORATION
//  Copyright (c) 2015 Sony Corporation.  All Rights Reserved.
//
//  Reference File Name     : (Generated by Excel)
//  Reference File Revision : (none)
//  Reference File Project  : 
//==========================================================



module                  SCL_LBUFF(
     VTCLK
    ,XRST
    ,SCL_SEL4BLK_LU_H
    ,SCL_CIBLK_IBLK_H
    ,SCL_CIBLK_IBLK_V_0
    ,IHSYNC
    ,IVSYNC
    ,IDATA_EN
    ,ODATA_EN
    ,SCL_SEL4BLK_EXCEP_H
    ,SCL_SEL4BLK_EXCEP_V
    ,IDATA0
    ,IDATA1
    ,IDATA2
    ,IDATA3
    ,SCL_LBUFF_IPIX0
    ,SCL_LBUFF_IPIX1
    ,SCL_LBUFF_IPIX2
    ,SCL_LBUFF_IPIX3
    ,OHSYNC
    ,OVSYNC
);


/*************************************************
INPUT , OUTPUT
*************************************************/
input           VTCLK;                          // 
input           XRST;                           // 
input   [9:0]   SCL_SEL4BLK_LU_H;               // 
input   [9:0]   SCL_CIBLK_IBLK_H;               // 
input           SCL_CIBLK_IBLK_V_0;             // 
input           IHSYNC;                         //
input           IVSYNC;                         //
input           IDATA_EN;                       // 
input           ODATA_EN;                       // 
input           SCL_SEL4BLK_EXCEP_H;            // 
input           SCL_SEL4BLK_EXCEP_V;            // 
input   [9:0]   IDATA0;                         // 
input   [9:0]   IDATA1;                         // 
input   [9:0]   IDATA2;                         // 
input   [9:0]   IDATA3;                         // 
output  [39:0]  SCL_LBUFF_IPIX0;                // 
output  [39:0]  SCL_LBUFF_IPIX1;                // 
output  [39:0]  SCL_LBUFF_IPIX2;                // 
output  [39:0]  SCL_LBUFF_IPIX3;                // 
output          OHSYNC;                         //
output          OVSYNC;                         //

/*************************************************
parameter
*************************************************/
parameter data_width = 42;
parameter depth = 992;
parameter rst_mode = 0;

/*************************************************
reg, wire
*************************************************/
//before SRAM
reg  [15:0] iblkhm40;
reg  iblkv_flg_evn;
reg  iblkv_flg_odd;
reg  IDATA_EN_pre;
wire [41:0] I_PIX;
//after SRAM
reg  [39:0] SCL_LBUFF_IPIX0;
reg  [39:0] SCL_LBUFF_IPIX1;
reg  [39:0] SCL_LBUFF_IPIX2;
reg  [39:0] SCL_LBUFF_IPIX3;
reg  OHSYNC;
reg  OVSYNC;
reg  OHSYNC_pre;
reg  OVSYNC_pre;
reg  odata_en_pre1;
reg  odata_en_pre2;
reg  [41:0] ipix_pre;
reg  [39:0] ipix2_pre;
reg  [39:0] ipix3_pre;
reg  [39:0] LBEVN_odata_pre;
reg  [39:0] LBODD_odata_pre;
wire [41:0] data_out1;
wire [41:0] data_out2;
wire [39:0] sel_odata11;
wire [39:0] sel_odata12;
wire [39:0] sel_odata21;
wire [39:0] sel_odata22;
wire [39:0] sel_odata31;
wire [39:0] sel_odata41;

assign I_PIX = {IHSYNC, IVSYNC, IDATA0, IDATA1, IDATA2, IDATA3};
assign sel_odata11 = ((SCL_SEL4BLK_EXCEP_V == 1) ? LBEVN_odata_pre : LBODD_odata_pre);
assign sel_odata12 = ((SCL_CIBLK_IBLK_V_0 == 1) ? LBEVN_odata_pre : sel_odata11);
assign sel_odata21 = ((SCL_SEL4BLK_EXCEP_V == 1) ? data_out1[39:0] : data_out2[39:0]);
assign sel_odata22 = ((SCL_CIBLK_IBLK_V_0 == 1) ? data_out1[39:0] : sel_odata21);
assign sel_odata31 = ((SCL_SEL4BLK_EXCEP_V == 1) ? LBODD_odata_pre : ipix2_pre);
assign sel_odata41 = ((SCL_SEL4BLK_EXCEP_V == 1) ? data_out2[39:0] : ipix3_pre);

always @(posedge VTCLK or negedge XRST) begin
  if (XRST == 0) begin
    SCL_LBUFF_IPIX0 <= 0;
    SCL_LBUFF_IPIX1 <= 0;
    SCL_LBUFF_IPIX2 <= 0;
    SCL_LBUFF_IPIX3 <= 0;
  end else begin
    iblkhm40 <= (SCL_CIBLK_IBLK_H - SCL_SEL4BLK_EXCEP_H) * 7'd40;
    iblkv_flg_evn <= SCL_CIBLK_IBLK_V_0 | SCL_SEL4BLK_EXCEP_V;
    iblkv_flg_odd <= ~SCL_CIBLK_IBLK_V_0 | SCL_SEL4BLK_EXCEP_V;
    odata_en_pre1 <= ODATA_EN;
    odata_en_pre2 <= odata_en_pre1;
    ipix_pre <= I_PIX;
    ipix2_pre <= ipix_pre[39:0];
    ipix3_pre <= I_PIX[39:0];
    LBEVN_odata_pre <= data_out1[39:0];
    LBODD_odata_pre <= data_out2[39:0];
    
    if (SCL_CIBLK_IBLK_V_0 == 1) begin
      OHSYNC_pre <= data_out1[41];
      OVSYNC_pre <= data_out1[40];
    end else begin
      OHSYNC_pre <= data_out2[41];
      OVSYNC_pre <= data_out2[40];
    end
    if (odata_en_pre2 == 1) begin
      //i_pix01
      SCL_LBUFF_IPIX0 <= sel_odata12;
      SCL_LBUFF_IPIX1 <= sel_odata22;
      SCL_LBUFF_IPIX2 <= sel_odata31;
      SCL_LBUFF_IPIX3 <= sel_odata41;
      OHSYNC <= OHSYNC_pre;
      OVSYNC <= OVSYNC_pre;
    end else begin
      //i_pix01
      SCL_LBUFF_IPIX0 <= SCL_LBUFF_IPIX0;
      SCL_LBUFF_IPIX1 <= SCL_LBUFF_IPIX1;
      //i_pix2
      SCL_LBUFF_IPIX2 <= SCL_LBUFF_IPIX2;
      //i_pix3
      SCL_LBUFF_IPIX3 <= SCL_LBUFF_IPIX3;
    end
  end
end

/*
DW_raw_rw_s_dff #(data_width, depth, rst_mode)
   LBUFF_EVN (    
              .clk             (VTCLK          )
             ,.rst_n           (XRST           )
             ,.cs_n            (1'b1           )
             ,.wr_n            (iblkv_flg_evn  )
             ,.rw_addr         (iblkhm40       )
             ,.data_in         (ipix_pre       )
             ,.data_out        (data_out1      )
             );

DW_raw_rw_s_dff #(data_width, depth, rst_mode)
   LBUFF_ODD ( 
              .clk             (VTCLK          )
             ,.rst_n           (XRST           )
             ,.cs_n            (1'b1           )
             ,.wr_n            (iblkv_flg_odd  )
             ,.rw_addr         (iblkhm40       )
             ,.data_in         (ipix_pre       )
             ,.data_out        (data_out2      )
             );
*/

endmodule
